<UserControl x:Class="GoogleCloudExtension.StackdriverErrorReporting.ErrorReportingToolWindowControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:control="clr-namespace:GoogleCloudExtension.Controls"
             xmlns:local="clr-namespace:GoogleCloudExtension.StackdriverErrorReporting"    
             xmlns:utils="clr-namespace:GoogleCloudExtension.Utils;assembly=GoogleCloudExtension.Utils"      
             xmlns:mp="clr-namespace:GoogleCloudExtension.Extensions"                     
             Background="{DynamicResource VsBrush.Window}"
             Foreground="{DynamicResource VsBrush.WindowText}"
             mc:Ignorable="d"
             d:DesignHeight="640" d:DesignWidth="640"
             d:DataContext="{d:DesignInstance IsDesignTimeCreatable=True,Type=local:ErrorReportingViewModel}" >
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="../Theming/CommonResources.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <utils:VisibilityConverter x:Key="visibilityConverter" />
            <utils:VisibilityConverter x:Key="visibilityConverterNegated" IsNegated="True" />

            <Style x:Key="LinkButton" TargetType="Button">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <TextBlock FontWeight="DemiBold">
                                <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding IsMouseOver,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}}" Value="True">
                                                <Setter Property="TextDecorations" Value="Underline" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>                                    
                                <ContentPresenter />
                            </TextBlock>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground" Value="Black" />
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter Property="Foreground" Value="Blue" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="cellStyle" TargetType="DataGridCell">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="DataGridCell">
                            <Border  BorderThickness="0">
                                <Border x:Name="border" Padding="3, 4, 3, 4" >
                                    <ContentPresenter />
                                </Border>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="rowStyle" TargetType="DataGridRow">
                <Setter Property="TextBlock.TextWrapping" Value="NoWrap" />
                <Setter Property="TextBlock.FontSize" Value="12" />
                <Setter Property="BorderThickness" Value="0, 0, 0, 1"/>
                <Setter Property="BorderBrush" Value="LightGray" />
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="#F5F5F5" />
                    </Trigger>
                </Style.Triggers>
            </Style>

        </ResourceDictionary>
    </UserControl.Resources>

    <Grid Margin="12, 0, 12, 12">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <control:TitleBar Margin="-12, 0, -12, 0" />

        <Border 
            Grid.Row="1"
            Padding="12, 6, 0, 6"    
            BorderThickness="0, 0, 0, 1"    
            BorderBrush="LightGray"
            IsEnabled="{Binding IsLoadingComplete}">

            <local:AutoReloadButton     
                x:Name="autoReloadToggleButton"/>
        </Border>

        <Grid Grid.Row="2"
              Margin="0, 12, 0, 12" 
              IsEnabled="{Binding IsLoadingComplete}"
              >
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <WrapPanel Grid.Column="0" Margin="0, 0, 24, 0">
                <TextBlock                 
                    Text="Errors in the last" 
                    FontSize="16"
                    Style="{StaticResource CommonTextStyle}"/>
                <TextBlock
                    Margin="3, 0, 0, 0"
                    FontSize="16"
                    Text="{Binding CurrentTimeRangeCaption}" 
                    Style="{StaticResource CommonTextStyle}"/>
            </WrapPanel>
            <local:TimeRangeButtons Grid.Column="1" DataContext="{Binding TimeRangeButtonsModel}" />
        </Grid>

        <DataGrid Grid.Row="3"
                  Panel.ZIndex="5"
                  x:Name="dataGridEventGroup"
                  IsReadOnly="True" 
                  BorderThickness="0"
                  GridLinesVisibility="None" 
                  HeadersVisibility="Column"
                  AutoGenerateColumns="False" 
                  ItemsSource="{Binding GroupStatsView}"   
                  CellStyle="{StaticResource cellStyle}"
                  RowStyle="{StaticResource rowStyle}" 
                  IsEnabled="{Binding IsLoadingComplete}"
                  ScrollViewer.ScrollChanged="dataGrid_ScrollChanged"
                  Visibility="{Binding ShowException, Converter={StaticResource visibilityConverterNegated}}"  
                  >
            <DataGrid.Resources>
                <!--DataTemplate for Published Date column defined in Grid.Resources.  PublishDate is a property on the ItemsSource of type DateTime -->
                <DataTemplate x:Key="MessageStackTemplate" >
                    <StackPanel>
                        <Button Style="{StaticResource LinkButton}" 
                                Content="{Binding Message}"
                                Command="{Binding NavigateDetailCommand}"
                                HorizontalAlignment="Left"
                                />
                        <TextBlock Text="{Binding Stack}" Style="{StaticResource CommonTextStyle}"/>
                    </StackPanel>
                </DataTemplate>
                <DataTemplate x:Key="OccurancesTemplate" >
                    <local:TimedCountMiniBarChart 
                        DataContext="{Binding BarChartModel}" 
                        Margin="0, 6, 0, 6" />
                </DataTemplate>
                <!-- Override the text highlight color. -->
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" 
                                     Color="Black"/>
            </DataGrid.Resources>

            <DataGrid.Columns>
                <DataGridTemplateColumn Header="Occurances" 
                                        CellTemplate="{StaticResource OccurancesTemplate}" />

                <DataGridTextColumn Header="Users" Binding="{Binding AffectedUsersCount}" />

                <DataGridTextColumn Binding="{Binding Count}" />

                <DataGridTemplateColumn Header="Error" 
                                        Width="460"
                                        CellTemplate="{StaticResource MessageStackTemplate}" />

                <DataGridTextColumn Binding="{Binding SeenIn}" 
                                    Header="Seen in"
                                    />

                <DataGridTextColumn Binding="{Binding FirstSeen, StringFormat=d}" 
                                    Header="First seen"
                                    />

                <DataGridTextColumn Binding="{Binding LastSeen, StringFormat=d}" 
                                    Header="Last seen"
                                    />

                <DataGridTextColumn Binding="{Binding Status}" 
                                    Header="Status"
                                    />

                <DataGridTextColumn Binding="{Binding Mute}" 
                                    Header=""
                                    />

            </DataGrid.Columns>
        </DataGrid>

        <control:ProgressIndicator 
            Grid.Row="3"
            Panel.ZIndex="10"
            Margin="0, 60, 0, 0"
            HorizontalAlignment="Center"                       
            VerticalAlignment="Top" 
            FullDuration="1000"
            Visibility="{Binding IsRefreshing, Converter={StaticResource visibilityConverter}}" >
        </control:ProgressIndicator>

        <control:ProgressIndicator 
            Grid.Row="4"
            Padding="12"
            Panel.ZIndex="10"
            Margin="0, -60, 0, 0"
            HorizontalAlignment="Center"                       
            FullDuration="1000"
            Visibility="{Binding IsLoadingNextPage, Converter={StaticResource visibilityConverter}}" >
        </control:ProgressIndicator>

        <TextBox 
            Grid.Row="3"
            Panel.ZIndex="15"
            Padding="8, 5, 8, 5" 
            VerticalAlignment="Top"
            HorizontalAlignment="Stretch"
            TextAlignment="Left" 
            TextWrapping="Wrap"
            Foreground="Red" 
            Text="{Binding ExceptionString, Mode=OneWay}" 
            Visibility="{Binding ShowException, Converter={StaticResource visibilityConverter}}" 
            ScrollViewer.VerticalScrollBarVisibility="Auto"
            IsReadOnly="True" />
    </Grid>
</UserControl>
